# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

environment:
  global:
    CRATE_NAME: alacritty
    RUST_BACKTRACE: 1

  matrix:
    - platform: x86_64
      TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: stable
      CLIPPY: false

    - platform: x86_64
      TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: nightly
      CLIPPY: true

    - platform: x86
      TARGET: i686-pc-windows-msvc
      RUST_VERSION: stable
      CLIPPY: false

    - platform: x86
      TARGET: i686-pc-windows-msvc
      RUST_VERSION: nightly
      CLIPPY: true

matrix:
  allow_failures:
    - CLIPPY: true

shallow_clone: true

install:
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V
  # Make 32bit libclang dll available for winpty-sys build on i686
  - If [%TARGET%]==[i686-pc-windows-msvc] (
      copy assets\windows\x86\libclang_win32_5.0.1.dll "C:\Program Files\LLVM\bin\libclang.dll"
    )

build_script:
  # Only build once per architecture
  - if [%CLIPPY%]==[false] (
      cargo +%RUST_TOOLCHAIN% build --release
    )

before_test:
  - If [%CLIPPY%]==[true] (
      cargo install -f clippy
    )

test_script:
  - ps: |
      if ($env:CLIPPY -eq "true") {
        cargo +$env:RUST_TOOLCHAIN clippy 2> $null
      } else {
        cargo +$env:RUST_TOOLCHAIN test 2> $null
        cd winpty
        cargo +$env:RUST_TOOLCHAIN test 2> $null
      }

cache:
  # Ideally we'd also cache the toolchain but it's too large to fit in the free cache.
  # Building alacritty takes significantly longer than downloading the toolchain.
  - target

artifacts:
  - path: target\release\alacritty.exe
    name: Alacritty
  - path: assets\windows\%platform%\winpty-agent.exe
    name: Winpty agent